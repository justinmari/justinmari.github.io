<?xml version="1.0" encoding="UTF-8"?>
<projects>

    <project>
        <universalname>SkateSidescroller</universalname>
        <name>Skate Sidescroller</name>
        <category>Unity</category>
        <languages>
            <language>C#</language>
            <language>Unity 2D</language>
        </languages>
        <descriptions>
            <description>
            This game is an example of one of my spontaneous bouts of coding.
            </description>
            <description>
            During the summer of one of my highschool years, I decided to revisit Unity and create a game inspired by one of my close friends.
            I combined his passion in skateboarding with my passion in game development, and this side scrolling skateboarding game was born.
            </description>
            <description>
            This is the first game that I have developed without much help from online resources and where I relied mostly on prior game development experience.
            I heavily used my prior knowledge in game loops and game state to achieve the final result.
            I also explored creating power ups which alter the character's traits, such as number of jumps, lives, and speed.
            All the art and animations are mostly done by yours truly (and yes I know they could use some work).
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>2DRPG</universalname>
        <name>2D RPG</name>
        <category>Gamemaker Studio</category>
        <languages>
            <language>GML</language>
        </languages>
        <descriptions>
            <description>
            A game that really impressed me with its minimalistic and unconventional combat system was none other than Toby Fox's Undertale.
            This game was beautiful in its own right, and it inspired me to try making a game of my own using the same engine: Gamemaker Studio.
            </description>
            <description>
            This game was made following a tutorial series for Gamemaker Studio on YouTube.
            As I learned each part of the program, I took the idea and ran with it.
            </description>
            <description>
            Introduced how to make a simple AI so slimes follow the player?
            Create a giant crab boss that charges up for 2 seconds and then rams the player at full speed.
            </description>
            <description>
            Taught how to make enemies drop experience orbs?
            Make it so that experience orbs and health orbs explode from the enemy and return to the player.
            </description>
            <description>
            Taught how to spawn objects in the game?
            Allow the player to fire multiple fireballs which hurt and damage enemies (this wasn't actually implemented properly as my tiny brain at the
            time could not comprehend how to do it).
            </description>
            <description>
            Gamemaker Studio was my first game engine prior to Unity.
            Its built in language, GML, was very easy to learn and solidified many programming basics that I have learned during highschool.
            GML introduced me to the idea of scripting, which took me some time to grasp.
            Simply put, I came to learn that scripts are very useful when tackling unique tasks, and are amazing when those unique tasks come up very often.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>HotPursuit</universalname>
        <name>Hot Pursuit</name>
        <category>FPS</category>
        <languages>
            <language>C</language>
            <language>Unity 3D</language>
        </languages>
        <descriptions>
            <description>
            Now this was an interesting game that my university friends and I decided to collaborate often.
            One of my colleagues suggested we create a game that is similar to the FPS game SUPERHOT.
            In SUPERHOT, time only moves while you moved, and you have to use firearms or melee weapons to fight enemies.
            In our game that we've named Hot Pursuit (I know, very original indeed), the main character would also have a mechanic
            which slows time. But, instead of using firearms or melee weapons, the character has to pop up objects around them
            using a sort of ground slam. The character can then slow time, causing said objects to slow down while in the air,
            allowing the charcater to hit the object towards any target or enemy they are aiming at.
            </description>
            <description>
            As one of the members in a group of three, we split into 3 different areas to work on:
            Enemy AI, Time Slow + Pop Up Mechanic, and Smooth, Buttery Movement Controls.
            As a big fan of 3D platformers and FPS games with nice movement controls, I was put in charge of developing movement.
            </description>
            <description>
            As one of my only Unity 3D Projects (I stuck mainly to 2D), creating smooth and silky movement was a challenge.
            One of the team members helped me create a movement state system using stacks.
            While it took some time to grasp, I was able to understand how the system is able to seamlessly switch from
            one move state (walking) to another (running, crouching).
            You can also restrict moving into a specific movestate while in another move state (for example, you can't slide
            whilst walking, but you can slide when whilst running).
            I also went out of my way to revisit games which I highly enjoyed the movement in, and mimicked the feel of their controls.
            </description>
            <description>
            It was a very interesting project to work on which helped me learn many things from the use of raycasting to the particle system
            that Unity has to offer.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>BallGame</universalname>
        <name>Ball Game</name>
        <category>Unity</category>
        <languages>
            <language>C#</language>
            <language>Unity 3D</language>
        </languages>
        <descriptions>
            <description>
            A very early Unity project of mine that I developed even before high school.
            I believe this is one of the OG Unity tutorials that was published years ago, along with
            a top down shooter game similar to Galaga and a 2D platformer game.
            </description>
            <description>
            As usual, tutorials start you off by teaching you how to utilize Unity to create objects in a scene. 
            It also teaches you how to manipulate those objects using Unity's build in physics engine.
            Using the techniques I learned from the tutorial, I created my own levels and adde my own spin to them.
            For example, once I learned how to make platforms, I researched how I would be able to move those platforms 
            along a plane. Shortly, I was able to create a level with a horizontal moving platform, followed by a level 
            with a vertical moving platform.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>HTMLCanvas</universalname>
        <name>Canvas | JavaScript</name>
        <category>Web Development</category>
        <languages>
            <language>JavaScript</language>
            <language>HTML</language>
            <language>CSS</language>
        </languages>
        <descriptions>
            <description>
            There are many ways to create a website, but to make unique eyecatching ones is not an easy task.
            While researching different way to develop a website, I came across a number of JavaScript canvas tutorials 
            created by Chris Courses.
            This is what immediately hooked me in JavaScript canvas graphics.
            </description>
            <description>
            These tutorials solidified many programming concepts to me, which range from 2D physics, collision detection,
            event listeners, and object oriented programming.
            Also, these tutorials taught me how to use mathematical concepts in code to create beautiful imagery, such as
            utilizing a sine function to draw a sine wave and editing its parameters to create different styles of waves.
            If you've ever owned specific PlayStation consoles, you know what beautiful waves I'm talking about.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>AutonomousRobot</universalname>
        <name>Autonomous Robot</name>
        <category>Arduino</category>
        <languages>
            <language>C</language>
        </languages>
        <descriptions>
            <description>
            I always have a knack for building things, whether it be Legos, IKEA furniture, or physics projects (I'm
            still a bit peeved at my elastic powered car I built in grade 11. The elastics were so strong and performed so well the day before,
            and then underperformed the day of beacuse of all the testing I put it through).
            </description>
            <description>
            Robotics is a whole nother level. During my autonomous mobile robotics course, we were given a kit of arduinos and sensors to build
            a robot that could perform certain tasks.
            </description>
            <description>
            One task was to make sure the robot stays inside a a perimeter of electrical tape. Then, on top of that, the robot has to avoid
            colliding with any objects present withing the perimeter. Putting these two together was a serious task due to the limitations
            within the code as well as the limited sensors available, but with enough testing, can produce a robot that can maneuver withing the
            perimeter effectively.
            </description>
            <description>
            Finally, we had to create a track for the robot, where the robot must be able to change lanes (as a car would on a road). It should
            also go the speed of the object in front of it. Not only that, but the robot should be able to parallel park within an area of
            specific dimensions.
            With hard work, I was able to complete both tasks with flying colours. Wall-E would be so proud of me.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>PortfolioWebsite</universalname>
        <name>Portfolio Website</name>
        <category>Web Development</category>
        <languages>
            <language>HTML</language>
            <language>CSS</language>
            <language>JavaScript</language>
            <language>JQuery</language>
        </languages>
        <descriptions>
            <description>
            What you're seeing right now is the site that I am the most proud of.
            </description>
            <description>
            This portfolio site is entirely front-end, using the languages that are listed above.
            There is some automation using scripts that I have developed myself that I am very proud of.
            I also utilized by canvas knowledge to improve the uniqueness of the site.
            It might be a bit empty now, but I plan to add more visuals in the future using the canvas.
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>OpenGLTD</universalname>
        <name>OpenGL Tower Defense</name>
        <category>OpenGL</category>
        <languages>
            <language>C</language>
            <language>OpenGL</language>
            <language>freeglut</language>
            <language>GLEW</language>
        </languages>
        <descriptions>
            <description>
            This game was a course assingment for a computer graphics course.
            It involes creating 2D and 3D graphics using C and OpenGL.
            It also involves the study of the graphics pipeline within OpenGL and the different matrix transformations
            used in the process.
            Shading and Raytracing were also very interesting that we touched on during the course.
            </description>
            <description>
            The challenge of this project was the implementation of mathematical concepts within the code.
            For example, I had to rely on my knowledge in trigonometry to figure out the angles in which the
            robots need to rotate in order to target the cannon at all times.
            I also need the angle or rotation to allow the robot wheels to move along their projected path.
            Prior knowledge in collision detection also came into play, as the robots have to be destroyed once a 
            bullet collides with it.
            Finally, my experience in object oriented programming come to be when developing the robots, the cannon, and
            each projectile that gets redered on the screen. 
            </description>
        </descriptions>
    </project>

    <project>
        <universalname>VREscapeRoom</universalname>
        <name>VR Escape Room</name>
        <category>Unity</category>
        <languages>
            <language>C#</language>
        </languages>
        <descriptions>
            <description>
            Institution: Ryerson University, Department of Computer Science
            </description>
            <description>
            Course: CPS643 Virtual Reality
            </description>
            <description>
            YouTube: https://www.youtube.com/watch?v=_vqX5JhxFEc
            </description>
            <description>
            This project was a final assignment for a virtual reality course.
            Created using Unity Engine and Steam VR, this project demonstrates various aspects of virtual reality,
            such as navigation, object selection/manipulation, and haptic feedback. These aspects aim to promote
            the user's sense of immersion, which is what separates virtual reality from computer graphics
            generated on a 2D screen.
            </description>
            <description>
            Virtual reality aims to immerse a player in a virtual environment. To achieve this, I scaled objects
            to match their real life sizes. Also, I used haptic vibrations when grabbing or interacting with objects,
            allowing the user to feel a sense of touch inside the virtual environment. This project utilized
            the Oculus Quest 2 using the 6DOF Oculus Touch controllers.
            </description>
            <description>
            The choice of an escape room allowed me to apply what I have learned in the virtual reality course
            to my knowledge in Unity game development. The most notable feature that I have implemented is the lock system
            I made crom scratch. The system allows for easily creating new types of mechanics when locking and unlocking
            objects; ones I have implemented are a Key/Lock, Codelock, and Multilock system.
            </description>
            <description>
            On the game development side of things, I have implemented a few mechanics such as a morse code emitter
            and a logic toggle puzzle.
            </description>
        </descriptions>
    </project>

</projects>